// Task 1

// Сумма пользовательских чисел

// важность: 5
// Создайте скрипт, который запрашивает ввод двух чисел (используйте prompt) и после показывает их сумму.

// Запустить демо

// P.S. Есть «подводный камень» при работе с типами.

function enterNumber(a, b) {
  let sum;

  a = +prompt();
  b = +prompt();


  sum = a + b;

  return sum;
}

enterNumber();


// Task 2

// Почему 6.35.toFixed(1) == 6.3?
// важность: 4
// Методы Math.round и toFixed, согласно документации, округляют до ближайшего целого числа: 0..4 округляется в меньшую сторону, тогда как 5..9 в большую сторону.

// Например:

// alert( 1.35.toFixed(1) ); // 1.4
// Но почему в примере ниже 6.35 округляется до 6.3?

// alert( 6.35.toFixed(1) ); // 6.3
// Как правильно округлить 6.35?

// Во внутреннем двоичном представлении 6.35 является бесконечной двоичной дробью. Хранится она с потерей точности…

// Давайте посмотрим:

// alert( 6.35.toFixed(20) ); // 6.34999999999999964473
// Потеря точности может как увеличивать, так и уменьшать число. В данном случае число становится чуть меньше, поэтому оно округляется в меньшую сторону.

// А для числа 1.35?

// alert( 1.35.toFixed(20) ); // 1.35000000000000008882
// Тут потеря точности приводит к увеличению числа, поэтому округление произойдёт в большую сторону.

// Каким образом можно исправить ошибку в округлении числа 6.35?

// Мы должны приблизить его к целому числу, перед округлением:

// alert( (6.35 * 10).toFixed(20) ); // 63.50000000000000000000
// Обратите внимание, что для числа 63.5 не происходит потери точности. Дело в том, что десятичная часть 0.5 на самом деле 1/2. Дробные числа, делённые на степень 2, точно представлены в двоичной системе, теперь мы можем округлить число:

// alert( Math.round(6.35 * 10) / 10); // 6.35 -> 63.5 -> 64(rounded) -> 6.4


// Task 3

// Ввод числового значения
// важность: 5
// Создайте функцию readNumber, которая будет запрашивать ввод числового значения до тех пор, пока посетитель его не введёт.

// Функция должна возвращать числовое значение.

// Также надо разрешить пользователю остановить процесс ввода, отправив пустую строку или нажав «Отмена». В этом случае функция должна вернуть null.

function readNumber() {
  let num;

  do {
    num = prompt("Введите число", 0);
  } while (!isFinite(num))

  if (num === null || num === '') return null;

  return +num;
}

alert(`Число: ${readNumber()}`);

// Task 4

// Бесконечный цикл по ошибке
// важность: 4
// Этот цикл – бесконечный. Он никогда не завершится, почему?

// let i = 0;
// while (i != 10) {
//   i += 0.2;
// }

// Потому что i никогда не станет равным 10.

// Запустите скрипт и вы увидите реальные значения i:

// Ни одно из этих чисел не равно 10.

// Это происходит из-за потери точности, при прибавлении таких дробей как 0.2.

// Вывод: избегайте проверок на равенство при работе с десятичными дробями.



// Task 5

// Случайное число от min до max
// важность: 2
// Встроенный метод Math.random() возвращает случайное число от 0 (включительно) до 1 (но не включая 1)

// Напишите функцию random(min, max), которая генерирует случайное число с плавающей точкой от min до max (но не включая max).

// Пример работы функции:

// alert( random(1, 5) ); // 1.2345623452
// alert( random(1, 5) ); // 3.7894332423
// alert( random(1, 5) ); // 4.3435234525

function generateRandomFloat(min, max) {
  return min + Math.random() * (max - min);
}



// Task 6

// Случайное целое число от min до max
// важность: 2
// Напишите функцию randomInteger(min, max), которая генерирует случайное целое (integer) число от min до max (включительно).

// Любое число из интервала min..max должно появляться с одинаковой вероятностью.

// Пример работы функции:

// alert( randomInteger(1, 5) ); // 1
// alert( randomInteger(1, 5) ); // 3
// alert( randomInteger(1, 5) ); // 5

function generateRandomInteger(min, max) {
  // случайное число от min до (max+1)
  let rand = min + Math.random() * (max + 1 - min);
  return Math.floor(rand);
}